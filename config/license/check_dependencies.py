# Copyright (c) 2022 TraceTronic GmbH
#
# SPDX-License-Identifier: MIT

# pylint: disable=all

import argparse
import json
import sys
import os

from json.decoder import JSONDecodeError

from os.path import exists

filename = "check_dependencies.py"

# allowed spdx license identifiers
COMPATIBLE_LICENSES = [
    "MIT",
    "BSD-3-Clause",
    "Apache-2.0",
    "BSD 2-Clause",
    "PSF-2.0"
]

class ComponentValidator:
    def __init__(self, allow_component, sbom_component):
        self.allow = allow_component
        self.sbom = sbom_component

        self.errors = []

    def validate(self, product=False):
        self.__licenses()
        if not product:
            self.__version()
        return self.errors

    def __version(self):
        if self.allow["moduleVersion"] != self.sbom["version"]:
            self.append_error("version", self.allow["moduleVersion"], self.sbom["version"])

    def __licenses(self):
        allow_license = self.allow["actualLicense"].lower()
        prepared_license_list = [lic.lower() for lic in COMPATIBLE_LICENSES]
        if allow_license not in prepared_license_list:
            self.append_error("license", COMPATIBLE_LICENSES, allow_license)

    def append_error(self, key, expect, current):
        self.errors.append("Component '{}':'{}' expects (one of) '{}' but was '{}'."
                           .format(self.allow["moduleName"], key, expect, current))


def read_json(file_path):
    if not exists(file_path):
        raise FileNotFoundError(f"{file_path} does not exist.")

    with open(file_path) as f:
        try:
            return json.load(f)
        except JSONDecodeError as e:
            err_str = f"{file_path} seems not to be a valid .json file: {str(e)}"
            raise JSONDecodeError(err_str, e.doc, e.pos) from e


def compare_license_files(allow_json, sbom_json):
    found_errors = []
    found_warnings = []

    # dependencies
    allowed_packages = [item["moduleName"] for item in allow_json["allowedLicenses"]]
    sbom_packages = [item["name"] for item in sbom_json["components"]]

    if len(allowed_packages) != len(sbom_packages):
        found_errors.append("Number of components expects {} but was {}."
                            .format(len(allow_json["allowedLicenses"]),
                                    len(sbom_json["components"])))
    missing_allowed = set(sbom_packages).difference(set(allowed_packages))
    missing_sbom = set(allowed_packages).difference(set(sbom_packages))

    if len(missing_sbom):
        found_errors.append("Dependency {} not found in sbom_path but in allow list."
                            .format(missing_sbom))
    elif len(missing_allowed):
        found_warnings.append("Dependency {} not found in allow list but in sbom_path. "
                              "Check if still necessary."
                              .format(missing_allowed))

    for component in sbom_json["components"]:
        # component["license"] = metadata(component["name"])["license"]
        for allowed_component in allow_json["allowedLicenses"]:

            if allowed_component["moduleName"] == component["name"]:
                validator = ComponentValidator(allowed_component, component)
                found_errors.extend(validator.validate(False))

    return found_errors, found_warnings


def main(argv):
    allow_filepath = ''
    sbom_filepath = ''

    parser = argparse.ArgumentParser(
        prog="Dependency Checker",
        description="Checks the dependency tree generated by a dependency file (such as requirements.txt) against an "
                    "allowlist",
        epilog=""
    )

    parser.add_argument("-a", "--allowlist", required=True,
                        help="An allowlist for all software components which may be used in this product.")
    parser.add_argument("-s", "--sbom", default="cyclonedx.json", required=False,
                        help="An sbom (.json in cyclonedx format) of the actual components used in this product. "
                        "Default value: '%(default)s'")

    args = parser.parse_args()
    allow_filepath, sbom_filepath = args.allowlist, args.sbom

    allow_json = read_json(allow_filepath)
    sbom_json = read_json(sbom_filepath)

    err, warn = compare_license_files(allow_json, sbom_json)

    if warn:
        print(*warn, sep="\n")

    if err:
        print(*err, sep="\n")
        sys.exit(2)

    print("Dependency validation finished successfully.")


if __name__ == "__main__":
    # generate sbom_path
    os.system("cyclonedx-py -r --format json --force")

    # check against allowlist
    main(sys.argv[1:])
